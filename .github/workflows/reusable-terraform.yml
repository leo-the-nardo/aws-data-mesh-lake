name: Reusable Terraform Workflow

# This is a reusable workflow that can be called by other workflows
# It implements the cost-effective approval pattern

on:
  workflow_call:
    inputs:
      terraform_directory:
        description: 'Terraform directory to deploy'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version'
        required: false
        type: string
        default: '1.9.8'
    secrets:
      aws_role_arn:
        required: true
      aws_region:
        required: false

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: Terraform Plan (${{ inputs.terraform_directory }})
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.plan.outputs.has-changes }}
      is-destroy: ${{ steps.check-destroy.outputs.is-destroy }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for .destroy file
        id: check-destroy
        run: |
          if [ -f "${{ inputs.terraform_directory }}/.destroy" ]; then
            echo "is-destroy=true" >> $GITHUB_OUTPUT
            echo "🔴 .destroy file found - will plan DESTROY"
          else
            echo "is-destroy=false" >> $GITHUB_OUTPUT
            echo "✅ No .destroy file - will plan APPLY"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_role_arn }}
          aws-region: ${{ secrets.aws_region || 'us-east-1' }}
          role-session-name: gh-actions-${{ inputs.environment }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ steps.check-destroy.outputs.is-destroy }}" = "true" ]; then
            echo "🔴 Planning DESTROY..."
            terraform plan -destroy -var-file="variables/dev.tfvars" -out=tfplan -detailed-exitcode > plan_output.txt 2>&1 || EXIT_CODE=$?
          else
            echo "✅ Planning APPLY..."
            terraform plan -var-file="variables/dev.tfvars" -out=tfplan -detailed-exitcode > plan_output.txt 2>&1 || EXIT_CODE=$?
          fi
          
          # Show the plan output
          cat plan_output.txt
          
          # If EXIT_CODE is not set, command succeeded without changes
          if [ -z "$EXIT_CODE" ]; then
            EXIT_CODE=0
          fi
          
          echo ""
          echo "🔍 Terraform exit code: $EXIT_CODE"
          
          # Parse the plan output to check for changes
          if grep -q "Plan: 0 to add, 0 to change, 0 to destroy" plan_output.txt; then
            echo "ℹ️  No changes detected in plan output"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          elif grep -q "No changes" plan_output.txt; then
            echo "ℹ️  No changes detected in plan output"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Changes detected in plan output!"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
          
          # Exit with error if terraform failed
          if [ $EXIT_CODE -eq 1 ]; then
            echo "❌ Terraform plan failed!"
            exit 1
          fi
        working-directory: ${{ inputs.terraform_directory }}

  # This job waits for approval if environment has protection rules
  approval-gate:
    name: ${{ needs.terraform-plan.outputs.is-destroy == 'true' && 'Approval (DESTROY)' || 'Approval' }}
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: needs.terraform-plan.outputs.has-changes == 'true'
    environment:
      name: ${{ inputs.environment }}
    
    steps:
      - name: Approval Checkpoint
        run: |
          echo "🔍 Debug: has-changes = ${{ needs.terraform-plan.outputs.has-changes }}"
          echo "🔍 Debug: is-destroy = ${{ needs.terraform-plan.outputs.is-destroy }}"
          
          ACTION="${{ needs.terraform-plan.outputs.is-destroy == 'true' && '🔴 DESTROY' || '✅ APPLY' }}"
          echo "$ACTION approved for ${{ inputs.environment }}"
          echo "📁 Directory: ${{ inputs.terraform_directory }}"
          echo "👤 Approved by: ${{ github.actor }}"

  terraform-apply:
    name: ${{ needs.terraform-plan.outputs.is-destroy == 'true' && 'Terraform Destroy' || 'Terraform Apply' }} (${{ inputs.terraform_directory }})
    runs-on: ubuntu-latest
    needs: [terraform-plan, approval-gate]
    if: needs.terraform-plan.outputs.has-changes == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_role_arn }}
          aws-region: ${{ secrets.aws_region || 'us-east-1' }}
          role-session-name: gh-actions-${{ inputs.environment }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform Plan (for apply)
        run: |
          if [ "${{ needs.terraform-plan.outputs.is-destroy }}" = "true" ]; then
            terraform plan -destroy -var-file="variables/dev.tfvars" -out=tfplan
          else
            terraform plan -var-file="variables/dev.tfvars" -out=tfplan
          fi
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform Apply/Destroy
        run: |
          if [ "${{ needs.terraform-plan.outputs.is-destroy }}" = "true" ]; then
            echo "🔴 Executing DESTROY..."
            terraform apply -auto-approve tfplan
          else
            echo "✅ Executing APPLY..."
            terraform apply -auto-approve tfplan
          fi
        working-directory: ${{ inputs.terraform_directory }}

      - name: Summary
        run: |
          if [ "${{ needs.terraform-plan.outputs.is-destroy }}" = "true" ]; then
            echo "### 🔴 Destroy Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Action**: DESTROY" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️  **.destroy file still present** - infrastructure will NOT be recreated" >> $GITHUB_STEP_SUMMARY
            echo "- To recreate: Remove .destroy file and push" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Action**: APPLY" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Directory**: ${{ inputs.terraform_directory }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Executed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

