name: Terraform CI/CD

on:
  push:
    branches: [ main ]

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-plan:
    name: Terraform Plan - ${{ matrix.infra-dir }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        infra-dir: [infra-eks, infra-glue, infra-network, infra-state-resources]
      fail-fast: false  # Continue other jobs even if one fails
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to AWS using OIDC
        id: aws-auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Check if EKS cluster exists
        if: matrix.infra-dir == 'infra-eks'
        id: check-eks
        run: |
          if aws eks describe-cluster --name dev-eks-cluster --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "✅ EKS cluster exists"
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ EKS cluster does not exist yet"
          fi

      - name: Terraform Init
        run: terraform init
        working-directory: ./${{ matrix.infra-dir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./${{ matrix.infra-dir }}

      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ matrix.infra-dir }}" = "infra-eks" ]; then
            # Auto-detect: disable Helm if cluster doesn't exist
            DEPLOY_HELM="${{ steps.check-eks.outputs.cluster_exists }}"
            echo "🎯 Planning EKS with deploy_helm_addons=${DEPLOY_HELM}"
            terraform plan -no-color -var-file="variables/dev.tfvars" -var="deploy_helm_addons=${DEPLOY_HELM}"
          else
            terraform plan -no-color -var-file="variables/dev.tfvars"
          fi
        working-directory: ./${{ matrix.infra-dir }}

  manual-approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Await for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: leo-the-nardo
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Apply"
          issue-body: |
            Please review and approve the Terraform deployment.
            
            **Commit:** ${{ github.sha }}
            **Actor:** ${{ github.actor }}
            **Branch:** ${{ github.ref_name }}
            
            **Infrastructure Directories:**
            - infra-eks
            - infra-glue
            - infra-network
            - infra-state-resources
            
            The Terraform plans have been generated and are ready for deployment.
            Review the plan artifacts before approving.
          exclude-workflow-initiator-as-approver: false

  terraform-apply:
    name: Terraform Apply - ${{ matrix.infra-dir }}
    runs-on: ubuntu-latest
    needs: manual-approval
    strategy:
      matrix:
        infra-dir: [infra-eks, infra-glue, infra-network, infra-state-resources]
      fail-fast: false  # Continue other jobs even if one fails
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to AWS using OIDC
        id: aws-auth
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      - name: Check if EKS cluster exists
        if: matrix.infra-dir == 'infra-eks'
        id: check-eks-apply
        run: |
          if aws eks describe-cluster --name dev-eks-cluster --region ${{ env.AWS_REGION }} 2>/dev/null; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "✅ EKS cluster exists"
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ EKS cluster does not exist yet"
          fi

      - name: Terraform Init
        run: terraform init
        working-directory: ./${{ matrix.infra-dir }}

      - name: Terraform Apply
        id: apply
        run: |
          if [ "${{ matrix.infra-dir }}" = "infra-eks" ]; then
            # Auto-detect: disable Helm if cluster doesn't exist
            DEPLOY_HELM="${{ steps.check-eks-apply.outputs.cluster_exists }}"
            echo "🎯 Applying EKS with deploy_helm_addons=${DEPLOY_HELM}"
            terraform apply -auto-approve -var-file="variables/dev.tfvars" -var="deploy_helm_addons=${DEPLOY_HELM}"
          else
            terraform apply -auto-approve -var-file="variables/dev.tfvars"
          fi
        working-directory: ./${{ matrix.infra-dir }}

      - name: Output Terraform Results
        run: |
          echo "## Terraform Apply Results - ${{ matrix.infra-dir }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Terraform apply completed successfully for ${{ matrix.infra-dir }}!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Directory:** ${{ matrix.infra-dir }}" >> $GITHUB_STEP_SUMMARY

